import runtime;
import ds/tree;
import lingo/pegcode/driver;
import string;

ArExpr ::= ArSum, ArMult, ArInt, ArDiv, ArSub;
        ArSum (lhs : ArExpr, rhs: ArExpr);
        ArMult (lhs : ArExpr, rhs: ArExpr);
        ArInt (val : int);
	ArDiv (lhs : ArExpr, rhs: ArExpr);
	ArSub (lhs : ArExpr, rhs: ArExpr);

s2ar(str: string) -> ArExpr {
	e_gr = "#include arith.lingo";
	parsic(
		compilePegGrammar(e_gr),
		str,
		SemanticActions(setTree(defaultPegActions.t, 
			"createArInt", \s -> ArInt(s2i(s[0]))))
	);
}

calculator(e : ArExpr) -> int{
	switch(e){
		ArSum(lhs, rhs): {
			calculator(lhs) + calculator(rhs);
		}
		ArMult(lhs, rhs): {
			calculator(lhs) * calculator(rhs);
		}
		ArInt(val): {
			val;
		}
		ArSub(lhs, rhs): {
			calculator(lhs) - calculator(rhs);
		}
		ArDiv(lhs, rhs): {
		right_part = calculator(rhs);
		left_part = calculator(lhs);
		assert(right_part != 0, "Division by zero");
		left_part / right_part;
		}
	}	
}

ar2s(e: ArExpr) -> string {
    switch(e){
        ArSum(lhs, rhs): {
		"(" + ar2s(lhs) + "+" + ar2s(rhs) + ")";
	}
        ArMult(lhs, rhs): {
		"(" + ar2s(lhs) + "*" + ar2s(rhs) + ")";
	}
        ArInt(val) : {
		i2s(val);
	}
	ArSub(lhs, rhs): {
		"(" + ar2s(lhs) + "-" + ar2s(rhs) + ")";
	}
	ArDiv(lhs, rhs): {
		"(" + ar2s(lhs) + "/" + ar2s(rhs) + ")";
	}
	
    }
}

main() {
	x = "(((3 + 11) * 2 - (10 / 5))"; 
	
	expr = s2ar(x);
	println(expr);
	println(ar2s(expr));
	println(calculator(expr));
}
